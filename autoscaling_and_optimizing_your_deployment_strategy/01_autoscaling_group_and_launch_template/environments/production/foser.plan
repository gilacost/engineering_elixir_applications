module.swarm.data.aws_vpc.main: Reading...
module.swarm.data.aws_ami.amazon_linux_docker: Reading...
module.swarm.data.aws_vpc.main: Read complete after 1s [id=vpc-073bd07e]
module.swarm.data.aws_subnets.main_subnets: Reading...
module.swarm.data.aws_subnets.main_subnets: Read complete after 0s [id=eu-west-1]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform planned the following actions, but then encountered a problem:

  # module.contributing_workflow.github_branch_protection.main will be created
  + resource "github_branch_protection" "main" {
      + allows_deletions                = false
      + allows_force_pushes             = false
      + blocks_creations                = false
      + enforce_admins                  = true
      + id                              = (known after apply)
      + lock_branch                     = false
      + pattern                         = "main"
      + repository_id                   = "kanban"
      + require_conversation_resolution = false
      + require_signed_commits          = false
      + required_linear_history         = false

      + required_pull_request_reviews {
          + require_code_owner_reviews      = false
          + require_last_push_approval      = false
          + required_approving_review_count = 1
        }

      + required_status_checks {
          + contexts = [
              + "Compile with mix test, format, dialyzer & unused deps check",
            ]
          + strict   = true
        }
    }

  # module.repository_secrets.github_actions_secret.main["AGE_KEY"] will be created
  + resource "github_actions_secret" "main" {
      + created_at      = (known after apply)
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "kanban"
      + secret_name     = "AGE_KEY"
      + updated_at      = (known after apply)
    }

  # module.repository_secrets.github_actions_secret.main["AWS_ACCESS_KEY_ID"] will be created
  + resource "github_actions_secret" "main" {
      + created_at      = (known after apply)
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "kanban"
      + secret_name     = "AWS_ACCESS_KEY_ID"
      + updated_at      = (known after apply)
    }

  # module.repository_secrets.github_actions_secret.main["AWS_SECRET_ACCESS_KEY"] will be created
  + resource "github_actions_secret" "main" {
      + created_at      = (known after apply)
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "kanban"
      + secret_name     = "AWS_SECRET_ACCESS_KEY"
      + updated_at      = (known after apply)
    }

  # module.repository_secrets.github_actions_secret.main["GH_PAT"] will be created
  + resource "github_actions_secret" "main" {
      + created_at      = (known after apply)
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "kanban"
      + secret_name     = "GH_PAT"
      + updated_at      = (known after apply)
    }

  # module.repository_secrets.github_actions_secret.main["PRIVATE_KEY"] will be created
  + resource "github_actions_secret" "main" {
      + created_at      = (known after apply)
      + id              = (known after apply)
      + plaintext_value = (sensitive value)
      + repository      = "kanban"
      + secret_name     = "PRIVATE_KEY"
      + updated_at      = (known after apply)
    }

  # module.swarm.aws_iam_instance_profile.main_profile will be created
  + resource "aws_iam_instance_profile" "main_profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "DockerSwarmSSMInstanceProfile"
      + name_prefix = (known after apply)
      + path        = "/"
      + role        = "DockerSwarmSSMRole"
      + tags_all    = (known after apply)
      + unique_id   = (known after apply)
    }

  # module.swarm.aws_iam_policy.ssm_policy will be created
  + resource "aws_iam_policy" "ssm_policy" {
      + arn         = (known after apply)
      + description = "Policy to PUT and GET parameters from SSM for Docker Swarm"
      + id          = (known after apply)
      + name        = "DockerSwarmSSMPolicy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "ssm:PutParameter"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:ssm:eu-west-1:YOUR_AWS_ACCOUNT_ID:parameter/docker/*"
                      + Sid      = "SSMPutParameter"
                    },
                  + {
                      + Action   = "ssm:GetParameter"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:ssm:eu-west-1:YOUR_AWS_ACCOUNT_ID:parameter/docker/*"
                      + Sid      = "SSMGetParameter"
                    },
                  + {
                      + Action   = "ec2:DescribeInstances"
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "EC2DescribeInstances"
                    },
                  + {
                      + Action   = "ec2:CreateTags"
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "EC2CreateTags"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id   = (known after apply)
      + tags_all    = (known after apply)
    }

  # module.swarm.aws_iam_role.ssm_role will be created
  + resource "aws_iam_role" "ssm_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "DockerSwarmSSMRole"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.swarm.aws_iam_role_policy_attachment.ssm_role_policy_attachment will be created
  + resource "aws_iam_role_policy_attachment" "ssm_role_policy_attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "DockerSwarmSSMRole"
    }

  # module.swarm.aws_key_pair.deployer_key will be created
  + resource "aws_key_pair" "deployer_key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "swarm-key"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = (known after apply)
      + tags_all        = (known after apply)
    }

  # module.swarm.aws_security_group.swarm_sg will be created
  + resource "aws_security_group" "swarm_sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Elixir Phoenix app"
              + from_port        = 4000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 4000
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH port"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "172.31.0.0/16",
                ]
              + description      = "Docker container network discovery"
              + from_port        = 7946
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 7946
            },
          + {
              + cidr_blocks      = [
                  + "172.31.0.0/16",
                ]
              + description      = "Docker overlay network"
              + from_port        = 4789
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "udp"
              + security_groups  = []
              + self             = false
              + to_port          = 4789
            },
          + {
              + cidr_blocks      = [
                  + "172.31.0.0/16",
                ]
              + description      = "Docker swarm management"
              + from_port        = 2377
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 2377
            },
        ]
      + name                   = "swarm_pool_ports"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-073bd07e"
    }

  # module.swarm.aws_ssm_parameter.swarm_token will be created
  + resource "aws_ssm_parameter" "swarm_token" {
      + arn            = (known after apply)
      + data_type      = (known after apply)
      + description    = "The swarm manager join token"
      + id             = (known after apply)
      + insecure_value = (known after apply)
      + key_id         = (known after apply)
      + name           = "/docker/swarm_manager_token"
      + tags_all       = (known after apply)
      + tier           = (known after apply)
      + type           = "SecureString"
      + value          = (sensitive value)
      + version        = (known after apply)
    }

  # module.swarm.local_sensitive_file.private_key will be created
  + resource "local_sensitive_file" "private_key" {
      + content              = (sensitive value)
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0700"
      + file_permission      = "0400"
      + filename             = "./private_key.pem"
      + id                   = (known after apply)
    }

  # module.swarm.tls_private_key.rsa will be created
  + resource "tls_private_key" "rsa" {
      + algorithm                     = "RSA"
      + ecdsa_curve                   = "P224"
      + id                            = (known after apply)
      + private_key_openssh           = (sensitive value)
      + private_key_pem               = (sensitive value)
      + private_key_pem_pkcs8         = (sensitive value)
      + public_key_fingerprint_md5    = (known after apply)
      + public_key_fingerprint_sha256 = (known after apply)
      + public_key_openssh            = (known after apply)
      + public_key_pem                = (known after apply)
      + rsa_bits                      = 4096
    }

Plan: 15 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + swarm_ssh_command = <<-EOT
        aws ec2 describe-instances \
          --query "Reservations[*].Instances[*].{IP:PublicIpAddress}" \
          --filters \
          "Name=tag:aws:autoscaling:groupName,Values=swarm-asg" \
          "Name=instance-state-name,Values=running" \
          --region eu-west-1 \
          --output text | \
          awk '{print "ssh -i ./private_key.pem ec2-user@"$1}'
    EOT
